C++ was developed ny bjarne stroustup
c++ is a superset of c .
In c++ we can perform procedural , object oriented and generic programming all .
C follows top-down approach but c++ follows bottom-up approach.
Top Down Approach: In this we will decide the flow of functions first and then we will define the functions
Bottom Up Approach: In this we will define the functions and then decide the flow in main function.


Note:
        int *p;
        p=&x;  p points towards address of x

        int &y = x; y has reference of x
        reference variable is an internal pointer 
        It has to be initialised with declaration.


Functions:
        Functions help us to make our code easy to read easy to debugg but most of all it makes us to save
        our memory .The functions which we will call in our main will be there in our memory stack and 
        as soon as they are called they will be removed so that we can write big codes in our 64 kbyte
        fixed RAM.

        Small functions do not take much space but take time for calling and all so we prefer not to make 
        small functions as it will increase our time but we want to take it's other features such as easy to
        read and all so for that we can make inline functions.

        Inline Function : Inline function are made using keyword "Inline" . Inline is a request not a command
        which means it's compilers choice to make it inline or not if it will find it suitable then inline is made
        or not.
        In Inline while compiling compiler writes the code of the function instead of calling it so it executes
        the code direct . Using this we get our easy to read organised code and saves our time of call stack. 

        Syntax:
            inline void show(){
                cout<<"I am inline function";
            }

    Note: Polymorphism: It is the ability of the object to take many forms . It can be executed using
            1) Function OVERLOADING
            2) Operator OVERLOADING
            3) Virtual Functions

FUNCTION OVERLOADING: If we have more than on functions having same name then this process is called 
                    fucntion overloading.
                When one function is overloaded with different jobs .

                If we have two functions with same name and diff arguments then the argument which we will
                pass matches the function then that function will be called.




STRUCTURE: It is a collection of dissimilar events.
            It is used to group variables and create data type.

Syntax:   struct book{
            int bookid;
            char title[20];
            float price;
        };

        int main(){
            struct book b1={100,"title is" , 450.0};

            book b2;
            b2.bookid = 101;
            strcpy(b2.title,"title");
            b2.price = 450.0;

            book b3;
            b3=b3;
        }

        in c we have to write struct keyword but in c++ struct is optional
        In c structure we cannot have function but in c++ we can have functions.
        Members of structure are by default public.

    

Object Oriented Programming
oops is a type of programming technique in which everything revolves around object

Object is an entity which has state/properties and behaviour like laptop camera etc.

Object has data members and member functions.
Member functions can be defined inside a class or outside but if we define it inside a class functions are
by default inline but outside the class they are inline if we use keyword "inline".

oops is needed to create a more real world programming technique which increases the redability and managibilty
of our program.

For eg. in games we have a player which is an objects and it has some states like height features and all
and it has some behaviour like it's health , it can dance and all.

State Of an Object:
            The collection of values of the member variable of an object is called state.
            Ideally,state should not be changed by directly accessing the data members they should be changed
            by accessing functions.

Class:
It is a user-defined datatype.
It is basically a blueprint of object.
Basically if we have one int a; so we created an object a of class type integer Or
wh have Hero Ramesh so we have an object ramesh of class type hero . our object will inherit the properties 
of class from which it is inherited.

From this we can say that object is an instance of class.

An object of empty class wil have a memory of one byte for it's identification.

We can access public data members of an class using dot operator .

Access Modifiers:

1. public : They will be accessed by both
2. private : They will neither be accessed objects nor dervied class.
3. protected : They will be accessed by derived class but not objects

By default access modifier is private.

If we wanna access the private members of our class we can do the same through getter and setter functions 
refer getter/setter.cpp for code .

Dynamic Allocation of object:
    Synatx: Hero *spiderMan = new Hero;
    *spiderMan is the address of object stored in heap.
    refer DynamicAllocation.cpp for code

We have two data members in the class one is integer and the other is char so ideally sizeOf our object 
should be 5 byte but when we run it it was 8 byte for this we need to learn padding and data alignment 
later.

CONSTRUCTOR:
    whenever we make an object behind the scene a constructor is called 
    constructor is a function which has no return type and has same name as class.

Default Constructor: A default paramter is a function which has no input parameter . It is called whether the
constructor is made or not it will be called eitherway. 

Parameterized Constructor: It is a function which has parameters passed in it .

Copy Constructor: It is a fucntion in which address of the object is passed and it gets same value as data
members of the passed object. If we don't make this function in our class it will also be made own by own like
default constructor.

when we call default copy constructor it will perform shallow copy .

shallow copy:
        In this type of copy the address of one object is stored in the address of other object so if we change
        the value in one object the value of other object will also be chnaged so to solve this error we 
        make our own copy constructor in which we perform deep copy 

deep copy:
        In deep copy we perform original duplicacy which means we will copy the value of one object into other
        with different address og the other object in heap so if we chnage the value of object one it will not
        be reflected in the other object.


COPY ASSIGNMENT OPERATOR(=):
    Hero a (10,'B');
    Hero b (20,'C');

    a=b;

All the values of b will be copied into b so now values of a is equal to b.

DESTRUCTOR:
        It dealocate the memory of the object . for static object we destructor is called by default but for
        dynamic object we have to call destructor using "delete" keyword.

        destructor has same name as class no input parameter and no return type but it has a "~" sign in front
        of it's name to differentiate it from the default constructor.


STATIC:
    Static Local Variable: static int x;
    It has 0 value if it is not initialised. It will be same throughout the code and will not destroy if the 
    function is removed from call stack;

    Static Data Members: These data members can be accessed without creating the object and are constant
    throughout the code.
    These are initialised outside the class using scope resolution operator.
    syntax: datatype name_of_class :: name_of_member = value;

    Static functions : These functions can also be accessed without the creation of object and return only 
    static data members.


    const/const functions / intialisation list

OPERATOR OVERLOADING: Assume we have an add function so we can name it as add() but if we want to name it 
                as "+" we can't . Though we can do that if we want but we have to write opeartor 
                keyword in front as:

                syntax: int opeartor +(int a , int b){
                    return a+b;
                }

                must check operatorOverloading.cpp 

Friend Function: It is not a member function of a class to which it is a friend.
                It is declared inside the class but defined outside the class.
                It is declared with a friend keyword.
                It can access any data members of a class but not directly.
                It will have no caller object.
                Friend Function can be a friend to more than one classes. (see friendfunction2.cpp)
                Friend function can be declared in public or private doesn't matter coz it's not a member function


ENCAPSULATION:
        Wrapping up data members and functions.
        Fully encapusulated class is a class which has it's all data members as private.
        Encapsulation provide us feature such as data hiding. we can make our whole file "Read Only".

        It's really helpful for unit testing.

        We can group data members in c language too using structure but we cannot group their function 
        together.

INHERITANCE:
        Assume we have a class human and a class male. Now ideally male class should have all the peoperties
        of human class so here, human class is called superclass or parent class and male is called subclass
        or child class.

        We can inherit the properties through 3 access Modifiers public ,private and protected.

        TYPES:
            Single:
                class A{

                };
                class B:Public A{

                };

            Multiple:
                class A{

                };
                class B{

                };

                class C : Public A , Public B{

                };

            Multilevel:
                class A{

                };
                class B: public A{

                };
                class C: public B{

                };

            heirarchical:
                class A{

                };
                class B: public A{

                };
                class C: public A{

                };

            heriditary:


Access modifier plays a great role in inheritance like while inherting they are wriiten in front of parent
class. 
they denote the accesibility of the members of parent class to the objects of child class .

private members of parent class cannot be accessed by the objects of child class .

protected and public members can be accessed in case of public , protected member become protected and 
public becomes public and in case of protected they both become protected in child class so cannot be 
directly accessed by the objects.


Is-a realtionship:
    Banana is a fruit there is an association between these two classes Banana and fruit.
    now association is of three types:
     Aggregation
     composition
     inheritance


Constructor and destructor in inheritance:
    In inheritance child constructor is called first but then it will call the parent constructor which will be
    executed first and then it will execute child constructor .

    so, child constructor is called first but executed last unlike in destructor in which child destructor is
    executed first and then the parent .

    If we will not make constructor and destructorin inheritance it will be made by complier own by own
    but the syntax for the same is:


    class Parent{
        int a;
        public:
         Parent(int x){
            a=x;
         }
    }; 

    class Child{
        int b;
        public:
        Child(int x ,int y):Parent(x){
            b=y;
        }
    }

    int main(){
        Child khushi(10,20);
        return 0;
    }

Object Pointer:
            pointer which stores the address of the object of a particular class is called
            object pointer.

This Pointer:
            this is a local object pointer in every instance member function containing address 
            of the caller object. 

New & Delete:
          new is a keyword which make variable of certain datatype in heap which is known as dynamic
          memory allocation.

          DMA variables needs to be deleted as soon as they are used because there is no function stack 
          in it so that it is automatically deleted so we use delete keyword.

          syntax: delete p;
                  delete [] p ;  


Method overriding:
    when parent and child class have same function name with same arguements it's called overriding

Method Hiding:
    when parent and child class have same function name but different arguements it's called hiding.

Base Class Pointer:
    A pointer of parent class can store the address of it's child classes but it's inverse is not true.

Virtual Functions:
    In Early Binding everything is decided at complie time which object will call ehich function and all so consider the code:

        class A{

            public:
                void f1(){

                }

        };

        class B : public A{

            public:
                void f1(){
                    
                }

        };

        int main()
        {
            A *p , obj;
            B obj2;

            p = &obj2; //base class pointer can store address of it's child;

            obj.f1();  // in this case early binding will happen which means at compile time it will be decided that class b function will be called
                        and this is called method overriding
            p->f1(); //but in this case  memory will be given to p pointer at runtime so now compiler has only type of p pointer which is the parent 
                        class so it will call the function of parent class.
                      // Ideally this should not happen so we use the keyword virtual in front of our function so that it will perform late binding.
        }


Late Binding:
        It's a concept in which we tell our compiler to compile this program at runtime after we can allot the memory to our pointer.
        If we make a virtual function in parent class then all the child class function with same name are all virtual functions.

whenever a virtual function is declared in a class compiler automatically make a vptr (a pointer) and A
vtable(array) in it.

vptr contains the address of the table/array.

Array contains the address of the functions which will be called ac to late and early binding.

Do see the working of virtual class in the images folder.

Pure Virtual Function:
    A do nothing function is called a pure virtual function.

    Syntax:
        virtual void fun () = 0 ; 

    A class containing do nothing function cannot have it's object because it will lead to calling of do nothing 
    function which is illegal  but this type of class can have it's child class which can again call this function
    so it child class must have a diff function with same name so that conceptof overriding come into 
    action.
    And we make it virtual so that it cannot be called by the method of pointer.

    

Abstract class:
    A class which contains a pure virtual function is called an abstract class.
    Abstract class cannot have it's object but it can hace a child class which can have it's object.


Templates:
    Function Template:
        when we have to do function overloading just due to difference in data type of two function ans all
        the other number of arguements are same then instead of function overloading where we have to write
        same code again and again we can use Template function 

        Syntax:
                template <class x> x function(x arg1 , x arg2 ,...)

            In this x is the datatype which will be changed according to the arguments passed in the function calling.

    
